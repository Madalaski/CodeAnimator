Shader "Effects/Dither"
{
    Properties
    {
        _MainTex ("Texture", 2D) = "white" {}
+++1;        _Dither ("Dither", 2D) = "white" {}
+++70;        _Noise ("Noise", 2D) = "white" {}
+++9;        _ColorRamp("Color Ramp", 2D) = "white" {}
+++17;        _TL ("Direction", Vector) = (0.0, 0.0, 0.0, 0.0)
+++18;        _BL ("Direction", Vector) = (0.0, 0.0, 0.0, 0.0)
+++19;        _TR ("Direction", Vector) = (0.0, 0.0, 0.0, 0.0)
+++20;        _BR ("Direction", Vector) = (0.0, 0.0, 0.0, 0.0)
+++29;        _Tiling("Tiling", Float) = 256.0
+++71;        _Threshold("Threshold", Float) = 0.1
    }
    SubShader
    {
        // No culling or depth
        Cull Off ZWrite Off ZTest Always

        Pass
        {
            CGPROGRAM
            #pragma vertex vert
            #pragma fragment frag

            #include "UnityCG.cginc"

            struct appdata
            {
                float4 vertex : POSITION;
                float2 uv : TEXCOORD0;
            };

            struct v2f
            {
                float2 uv : TEXCOORD0;
                float4 vertex : SV_POSITION;
            };

            v2f vert (appdata v)
            {
                v2f o;
                o.vertex = UnityObjectToClipPos(v.vertex);
                o.uv = v.uv;
                return o;
            }

            sampler2D _MainTex;
+++2;            float4 _MainTex_TexelSize;

+++4;            sampler2D _Dither;
+++5;            float4 _Dither_TexelSize;
+++3;            
+++73;            sampler2D _Noise;
+++74;            float4 _Noise_TexelSize;
+++72;
+++11;            sampler2D _ColorRamp;
+++10;
+++22;            float4 _BL;
+++23;            float4 _TL;
+++24;            float4 _TR;
+++25;            float4 _BR;
+++21;
+++30;            float _Tiling;
+++75;            float _Threshold;
+++29;          
+++32;            
+++31;
+++34;            float cylinderProject(sampler2D tex, float2 texel, float3 dir) {
+++36;                float u = 0.5 + 0.5 * atan2( dir.x, -dir.z ) / 3.14159265;
+++37;                return tex2D(tex, texel * _Tiling * float2(u, 0.5f + dir.y)).r;
+++35;            }
+++33;           
+++43;            float uvSphereProject(sampler2D tex, float2 texel, float3 dir) {
+++45;                float u = 0.5 + 0.5 * atan2( dir.x, -dir.z ) / 3.14159265;
+++46;                float v = 0.5 - acos( dir.y ) / 3.14159265;
+++47;                return tex2D(tex, texel * _Tiling * float2(u, v)).r;
+++44;            }
+++42;          
+++51;            float cubeProject(sampler2D tex, float2 texel, float3 dir) {
+++53;                float3x3 rotDirMatrix = {0.9473740, -0.1985178,  0.2511438,
+++54;                                        0.2511438,  0.9473740, -0.1985178,
+++55;                                        -0.1985178,  0.2511438,  0.9473740};
+++56; 
+++57;                dir = mul(rotDirMatrix, dir);
+++58;                float2 uvCoords;
+++59;                if( (abs(dir.x) > abs(dir.y)) && (abs(dir.x) > abs(dir.z)) ) {
+++60;                    uvCoords = dir.yz; // X axis
+++61;                } else if( (abs(dir.z) > abs(dir.x)) && (abs(dir.z) > abs(dir.y)) ) {
+++62;                    uvCoords = dir.xy; // Z axis
+++63;                } else {
+++64;                    uvCoords = dir.xz; // Y axis
+++65;                }
+++66;
+++67;                return tex2D(tex, texel * _Tiling * uvCoords).r;
+++52;            }
+++50;           
+++77;            float2 edge (float2 uv, float2 delta)
+++78;            {
+++80;                float3 up = tex2D(_MainTex, uv + float2(0.0, 1.0) * delta);
+++81;                float3 down = tex2D(_MainTex, uv + float2(0.0, -1.0) * delta);
+++82;                float3 left = tex2D(_MainTex, uv + float2(1.0, 0.0) * delta);
+++83;                float3 right = tex2D(_MainTex, uv + float2(-1.0, 0.0) * delta);
+++84;                float3 centre = tex2D(_MainTex, uv);
+++85;
+++86;                return float2(min(up.b, min(min(down.b, left.b), min(right.b, centre.b))),
+++87;                    max(max(distance(centre.rg, up.rg), distance(centre.rg, down.rg)),
+++88;                    max(distance(centre.rg, left.rg), distance(centre.rg, right.rg))));
+++79;            }
+++76;
            float4 frag (v2f i) : SV_Target
            {
                fixed4 col = tex2D(_MainTex, i.uv);
+++28;                
+++27;                float3 dir = normalize(lerp(lerp(_BL, _TL, i.uv.y), lerp(_BR, _TR, i.uv.y), i.uv.x));
+++26;              
+++0;                float lum = dot(col, float3(0.299f, 0.587f, 0.114f));
~~~89;                float lum = col.b;
               
+++7;                float2 ditherCoords = i.uv * _Dither_TexelSize.xy * _MainTex_TexelSize.zw;
~~~38;              
+++8;                float ditherLum = tex2D(_Dither, ditherCoords);
~~~40;                float ditherLum = cylinderProject(_Dither, _Dither_TexelSize.xy, dir);
~~~48;                float ditherLum = uvSphereProject(_Dither, _Dither_TexelSize.xy, dir);
~~~68;                float ditherLum = cubeProject(_Dither, _Dither_TexelSize.xy, dir);
~~~91;                float ditherLum = (col.a < 0.5) ? cubeProject(_Noise, _Noise_TexelSize.xy, dir) :
+++93;                    cubeProject(_Dither, _Dither_TexelSize.xy, dir);
+++6;
+++94;                float2 edgeData = edge(i.uv.xy, _MainTex_TexelSize.xy * 2.0f);
+++95;
+++97;                lum = (edgeData.y < _Threshold) ? lum : ((edgeData.x < 0.1f) ? 1.0f :  0.0f);
+++96;
+++12;                float ramp = (lum <= clamp(ditherLum, 0.1f, 0.9f)) ? 0.1f : 0.9f;               
+++13;                float3 output = tex2D(_ColorRamp, float2(ramp, 0.5f));
~~~98;                float3 output = float4(1,1,1,1) * ramp;
+++14;
                return col;
~~~15;                return float4(output, 1.0f);
            }
            ENDCG
        }
    }
}
